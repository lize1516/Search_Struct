#pragma once
#include<iostream>
#include<vector>
#include<string>
#include<windows.h>
using namespace std;

//定义仿函数
template<class K>
struct _HashFunc
{
	size_t operator()(const K& key)
	{
		return key;
	}
};

//特化string版本
template<>             
struct _HashFunc<string>
{
	static size_t BDKHash(const char* str)
	{
		size_t seed = 131;   //13 131 1313 13131 .....
		size_t hash = 0;
		while (*str)
		{
			hash = hash*seed + (*str);
			str++;
		}
		return (hash & 0x7fffffff);
	}
	size_t operator()(const string& key)
	{  
		return BDKHash(key.c_str());  //返回一个const char* 类型的字符串
	}

};

template<class K,class V>
struct HashNode
{
	HashNode(const K& key=K(),const V& value=V())
	:Next(NULL)
	, _key(key)
	, _value(value)
	{ }

	struct HashNode* Next;
	K _key;
	V _value;

};

//素数表，表内为哈希表的容量，素数降低哈希冲突
const int _PrimeSize = 28;
static const unsigned long _PrimeList[_PrimeSize] =
{
	53ul, 97ul, 193ul, 389ul, 769ul, 1543ul, 3079ul, 6151ul,
	12289ul, 24593ul, 49157ul, 98317ul, 196613ul, 393241ul,
	786433ul, 1572869ul, 3145739ul, 6291469ul, 12582917ul,
	25165843ul, 50331653ul, 100663319ul, 201326611ul,
	402653189ul, 805306457ul, 1610612741ul, 3221225473ul,
	4294967291ul
};

template<class K, class V, class HashFunc = _HashFunc<K>>
class HashTable;

//迭代器
template<class K, class V>
struct HashIterator
{

	typedef HashIterator<K, V> Iter;
	typedef HashNode<K, V>* pNode;
	typedef HashTable<K, V> HashTable;

	HashIterator()
		:_pHead(NULL)
		, _ht(NULL)
	{}
	HashIterator(pNode _Node, HashTable* ht)
		:_pHead(_Node)
		, _ht(ht)
	{ }
	Iter& operator++()
	{
		_pHead = _Next(_pHead);
		return (*this);
	}
	Iter operator++(int)
	{
		Iter ret(*this);
		++(*this);
		return ret;
	}

	K operator*()
	{
		return _pHead->_key;
	}
	pNode operator->()
	{
		return _pHead;
	}
	bool operator!=(Iter& s)
	{
		return _pHead != s._pHead;
	}
	bool operator==(Iter& s)
	{
		return _pHead == s._pHead;
	}
private:
	pNode _Next(pNode& _node)
	{
		pNode temp = _node->Next;
		if (temp)
		{
			return temp;
		}
		else
		{
			int index = _ht->HashTableFunc(_pHead->_key)+1;
			for (size_t i = index; i < _ht->Capacity(); i++)
			{
				pNode ret = _ht->_hash[i];
				if (ret)
				{
					return ret;
				}
			}
			return NULL;
		}
	}

private:
	pNode _pHead;
	HashTable* _ht;
};


template<class K,class V,class HashFunc>
class HashTable
{
	typedef HashNode<K, V> Node;
	friend struct HashIterator<K, V>;
	typedef HashIterator<K, V> Iterator;
public:
	HashTable(const size_t& capacity=11)
	{ 
		_size = 0;
		_hash.resize(capacity);
	}

	//key可重复插入
	bool InsertEqual(const K& key,const V& value)
	{
		//检测是否需要扩容
		CheckCapacity();
		//求哈希值
		size_t index = HashTableFunc(key);
		if (_hash[index] == NULL)
		{
			_hash[index] = new Node(key, value);
			_size++;
			return true;
		}

		Node*ret = _hash[index];
		Node*cur = NULL;
		while (ret)
		{
			cur = ret;
			ret = ret->Next;
		}
		Node* newNode = new Node(key, value);
		cur->Next = newNode;
		_size++;
		return true;
	}

	//key不能重复的插入
	bool InsertUnique(const K& key,const V& value)
	{
		//检测是否需要扩容
		CheckCapacity();
		//求哈希值
		size_t index = HashTableFunc(key);
		if (_hash[index] == NULL)
		{
			_hash[index] = new Node(key, value);
			_size++;
			return true;
		}

		Node*ret = _hash[index];
		Node*cur = NULL;
		while (ret)
		{
			cur = ret;
			if (ret->_key == key)
				return false;
			ret = ret->Next;
		}
		Node* newNode = new Node(key, value);
		cur->Next = newNode;
		_size++;
		return true;
	}

	//删除有重复元素
	bool DeleteEqual(const K& key)
	{
		size_t index = HashTableFunc(key);
		Node* ret = _hash[index];

		if (ret == NULL)
			return false;

		Node* cur = NULL;
		while (ret)
		{
			if (ret->_key == key)
			{
				
				if (ret == _hash[index])
				{
					_hash[index] = ret->Next;
					delete ret;
					_size--;
					ret = _hash[index];
				}
				else
				{
					cur->Next = ret->Next;
					delete ret;
					_size--;
					ret = cur->Next;
				}
			}
			else
			{
				cur = ret;
				ret = ret->Next;
			}
		}
		return true;
	}

	//删除无重复元素
	bool DeleteUnique(const K& key)
	{
		size_t index = HashTableFunc(key);
		Node* ret = _hash[index];

		Node* cur = NULL;
		while (ret)
		{
			if (ret->_key == key)
			{
				if (ret == _hash[index])
				{
					_hash[index] = ret->Next;
					delete ret;
				}
				else
				{
					cur->Next = ret->Next;
					delete ret;
				}
				_size--;
				ret = NULL;
				return true;
			}
				cur = ret;
				ret = ret->Next;
		}
		return false;
	
	}

	//迭代器
	Iterator Begin()   //返回第一个元素所在的位置
	{
		for (size_t i = 0; i < _hash.size(); i++)
		{
			if (_hash[i])
			{
				return Iterator(_hash[i],this);
			}
		}
		return Iterator(NULL, NULL);
	}

	Iterator End()
	{
		return Iterator(NULL,NULL);
	}

	bool Empty()
	{
		return (_size==0)
	}
	size_t Size()
	{
		return _size;
	}
	size_t Capacity()
	{
		return _hash.size();
	}

	size_t HashTableFunc(const K& key)    //求哈希值
	{
		HashFunc ht;   //定义一个_HashFunc<K>变量
		size_t hash = ht(key);
		return (hash%_hash.size());   
	}

	void Display() //打印函数
	{
		Iterator it = Begin();
		while (it != End())
		{
			//Sleep(1000);
			cout <<it->_key <<"-->"<<it->_value<<endl;
			it++;
		}
	}

	~HashTable()
	{
		Clear();
	}

private:
	void Clear()  //清除函数
	{
		size_t count = _hash.size();
		for (size_t i = 0; i < count; i++)
		{
			if (_hash[i])
			{
				Node* ret = _hash[i];
				Node* cur = NULL;
				while (ret)
				{
					_hash[i] = ret->Next;
					delete ret;
					ret = _hash[i];
				}
			}
		}
		_size = 0;
	}

	void CheckCapacity()          //扩容
	{
		if (_hash.size() == _size)
		{
			int newSize = 0;
			int index = 0;
			while (index < _PrimeSize)
			{
				if (_hash.size() < _PrimeList[index])
				{
					newSize = index;
					HashTable<K, V> newHash(newSize);
					size_t count = 0;
					while (count < _hash.size())
					{
						Node* ret = _hash[count];
						while (ret)
						{
							newHash.InsertEqual(ret->_key, ret->_value);
							ret = ret->Next;
						}
						count++;
					}
					Swap(newHash);
				}
				index++;
			}
		}
	}

	void Swap(HashTable<K,V>& newHash)    //交换地址
	{
		swap(_hash,newHash._hash);
		swap(_size,newHash._size);
	}

private:
	vector<Node*> _hash;
	size_t _size;
};

void test4()
{
	int arr[] = {2,13,12,34,56,23,45};
	int size = sizeof(arr) / sizeof(arr[0]);
	HashTable<int, int> h1;
	for (int i = 0; i < size; i++)
	{
		h1.InsertUnique(arr[i],arr[i]+3);
	}
	h1.Display();

}
void testchar4()   //key值插入不能重复
{
	HashTable<string, string> h2;
	
	h2.InsertUnique("abc", "abc");
	h2.InsertUnique("sed", "sed");
	h2.InsertUnique("hello", "hello");
	h2.InsertUnique("1111","1111");
	h2.InsertUnique("1112","2222");
	h2.InsertUnique("1113","3333");

	/*h2.DeleteUnique("1111");
	h2.DeleteUnique("hello");*/
	h2.Display();
}

void Equaltest()
{
	HashTable<string, string> h3;
	h3.InsertEqual("1111","1111");
	h3.InsertEqual("2222", "2222");
	h3.InsertEqual("1111", "3333");
	h3.InsertEqual("abc", "bsahd");
	h3.InsertEqual("abc", "5555");
	h3.DeleteEqual("abc");
	h3.DeleteEqual("1111");
}
