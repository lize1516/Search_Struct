#include<iostream>
#include<vector>
#include<assert.h>
#include<utility>
#include<cstring>

using namespace std;

//定义仿函数
template<class K>
struct _HashFunc
{
	size_t operator()(const K& key)
	{
		return key;
	}
};

//特化string的版本
template<>
struct _HashFunc<string>
{
	static size_t BKDRHash(const char* str)
	{
		size_t seed = 131;    // 31 131 1313 13131 131313
		size_t hash = 0;
		while (*str)
		{
			hash = hash*seed + (*str++);
		}
		return (hash & 0x7fffffff);
	}
	size_t operator()(const string& key)
	{
		return BKDRHash(key.c_str());    //c_str()返回的是一个const char*  类型的字符串
	}
};

enum Status
{
	EXIST,
	DELETE,
	EMPTY
};

template<class K,class V>
struct HashTableNode
{
	//HashTableNode<K,V>* _pNode;
	K _key;
	V _value;
	Status _status;
	HashTableNode(const K& key=K(),const V& value=V())
		:_key(key)
		, _value(value)
		, _status(EMPTY)
	{ }

};

//素数表，表内为哈希表的容量，素数降低哈希冲突
const int _PrimeSize = 28;                
static const unsigned long _PrimeList[_PrimeSize] =
{
	53ul, 97ul, 193ul, 389ul, 769ul,1543ul, 3079ul, 6151ul,
	12289ul, 24593ul,49157ul, 98317ul, 196613ul, 393241ul,
	786433ul,1572869ul, 3145739ul, 6291469ul, 12582917ul,
	25165843ul,50331653ul, 100663319ul, 201326611ul, 
	402653189ul,805306457ul,1610612741ul, 3221225473ul,
	4294967291ul
};

template<class K,class V,class HashFunc=_HashFunc<K>>
class HashTable
{
	typedef HashTableNode<K, V> Node;
public:
	HashTable()
	{}
	HashTable(size_t size)
	{
		assert(size > 0);
		_v.resize(size);
		_size = 0;
	}
	//将K值转换成哈希值
	size_t _HashTableFunc(const K& key)
	{
		HashFunc hf;    //定义一个HashFunc的变量hf
		size_t hash = hf(key);  //用变量hf调用HashFunc的仿函数，返回对应的整型
		return hash% _v.size(); //算出哈希值，并返回
	}

	pair<Node*, bool> Insert(const K& key, const V& value)
	{
		//检查是否需要扩容
		CheckCapacity();
	
		//对K值进行取余，判断插入位置
		size_t index = _HashTableFunc(key);
		//如果存在，则循环着继续找
		while (_v[index]._status !=EMPTY)
		{
			index++;
			if (index == _v.size())
				index = 0;
		}
		_v[index]._key = key;
		_v[index]._value = value;
		_v[index]._status = EXIST;

		_size++;
		return make_pair<Node*, bool>(&_v[index], true);
	}

	Node* find(const K& key)        //查找位置
	{
		size_t index = _HashTableFunc(key);

		//如果存在，则继续寻找
		while (_v[index]._status == EXIST)
		{
			//若相等，判断状态是否是删除
			//若删除，则没找到，返回空
			//若没删除，则返回该位置的地址
			if (_v[index]._key == key)
			{
				if (_v[index]._status == DELETE)
					return NULL;

				return &_v[index];
			}
			index++;
			if (index == _size)
				index = 0;
		}
		return NULL;
	}

	void Delete(const K& key)
	{
		//删除仅需要将状态修改
		Node* delNode = find(key);

		if (delNode)
			delNode->_status = DELETE;
	}
private:
	//交换两个哈希表
	void Swap(HashTable<K, V>& h)
	{
		swap(_v, h._v);
		swap(_size, h._size);
	}

	void CheckCapacity()
	{
		//如果_v为空，则扩容到11
		if (_v.empty())
		{
			_v.resize(11);
		}

		//如果超过比例系数，则需要扩容
		if (_size * 10 / _v.size() >= 7)
		{
			size_t index = 0;
			while (_PrimeList[index] < _v.size())
			{
				index++;
			}
			size_t newSize = _PrimeList[index];
			HashTable<K, V> newh(newSize);    //新近一个哈希表
			for (size_t i = 0; i < _v.size(); i++)  //将旧的哈希表中的元素重新插入到新的哈希表
			{
				if (_v[i]._status==EXIST)
				newh.Insert(_v[i]._key, _v[i]._value);
			}
			//交换两个哈希表
			Swap(newh);
		}
	}

private:
	vector<Node> _v;
	size_t _size;

};
void test()
{
	int arr[] = { 3, 7, 12, 23, 45, 67, 13, 43 };
	int size = sizeof(arr) / sizeof(arr[0]);
	HashTable<int, int> h1(11);
	for (int i = 0; i < size; i++)
	{
		h1.Insert(arr[i], arr[i]+ 3);
	}
   
}

void test2()
{
	HashTable<string, string> h2(11);
	h2.Insert("abs", "1111");
	h2.Insert("222","2222");
	h2.Insert("223", "2223");
	h2.Insert("224", "2224");
	h2.Insert("225", "2225");

}
