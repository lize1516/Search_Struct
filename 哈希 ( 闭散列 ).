#include<iostream>
#include<string>
using namespace std;

#define CAPACITY 11

enum Status
{
	EXIST,
	DELETE,
	EMPTY
};
template<class K,class V>
struct HashNode
{
	HashNode(K key=K(),V value=V())
	:_key(key)
	, _value(value)
	, _status(EMPTY)
	{}

	K _key;
	V _value;
	Status _status;
};

//定义仿函数
template<class K>
struct _HashFunc
{
	size_t operator()(const K& key)
	{
		return key;
	}
};

//特化string的版本
template<>
struct _HashFunc<string>
{
	static size_t BKDHash(const char* str)
	{
		size_t seed = 131;   //13 131 1313 13131
		size_t hash = 0;
		while (*str)
		{
			hash = hash*seed + (*str);
			str++;
		}
		return (hash & 0x7fffffff);
	}
	size_t operator()(const string&key)
	{
		return BKDHash(key.c_str());   //c_str() 返回的是一个const char* 类型的字符串
	}
};

//素数表，表内为哈希表的容量，素数降低哈希冲突
const int _PrimeSize = 28;
static const unsigned long _PrimeList[_PrimeSize] =
{
	53ul, 97ul, 193ul, 389ul, 769ul, 1543ul, 3079ul, 6151ul,
	12289ul, 24593ul, 49157ul, 98317ul, 196613ul, 393241ul,
	786433ul, 1572869ul, 3145739ul, 6291469ul, 12582917ul,
	25165843ul, 50331653ul, 100663319ul, 201326611ul,
	402653189ul, 805306457ul, 1610612741ul, 3221225473ul,
	4294967291ul
};


template<class K,class V,class HashFunc=_HashFunc<K>>
class HashTable
{
	typedef HashNode<K, V> Node;

public:
	
	HashTable(const size_t& capacity=11)
		:_size(0)
		, _capacity(capacity)
	{
		head = new Node[capacity];
	}

	bool Insert(const K& key,const V& value)
	{
		//检查是否需要扩容
		CheckCapacity();
		//对key值进行取余判断插入位置
		size_t index = HashTableFunc(key);
		//如果存在则循环着继续找

		//LineCheck(index);     //（1）线性探测

		SecondCheck(index);     //（2）二次探测


		head[index]._key = key;
		head[index]._value = value;
		head[index]._status = EXIST;

		_size++;
		return true;
	}

	int Find(const K& key)   //查找元素
	{
	   //先求哈希值
		int index=HashTableFunc(key);
		int count = _capacity;
		while (count--)
		{
			if (head[index]._key == key)
				return index;
			index++;
			if (index == _capacity)
				index = 0;
		}
		return -1;    //没找到
	}

	bool Delete(const K& key)
	{
		int index = Find(key);
		if (index >= 0)
		{
			head[index]._status = DELETE;
			return true;
		}
		return false;
	}

	size_t Size()const
	{
		return _size;
	}

	bool Empty()const
	{
		return _size == 0;
	}

	~HashTable()
	{
		if (head != NULL)
			delete[]head;
		_size = 0;
		_capacity = 0;
	}

	void Display()
	{
		for (size_t i = 0; i < _capacity; i++)
		{
			cout <<i<<":"<< head[i]._key << "-->" << head[i]._value << endl;
		}
	}
private:
	int HashTableFunc(const K& key)
	{
		HashFunc hf;          //定义一个_HashFunc<K> 的对象hf
		size_t hash = hf(key);       //用hf调用相应的仿函数，返回一个整型
		return (hash%_capacity);  //算出哈希值并返回
	}
	
	void LineCheck(size_t& index)     //线性探测
	{
		while (head[index]._status != EMPTY)
		{
			index++;
			if (index == _capacity)
				index = 0;
		}
	}

	void SecondCheck(size_t& index)    //二次探测
	{
		int num = 0;
		int ret = index;
		while (head[index]._status != EMPTY)
		{
			num++;
			index = ret+ num*num;
		}
	}

	void CheckCapacity()        //扩容函数
	{
		//如果超过比例系数就需要扩容
		if ((_size * 10) / _capacity >= 7)
		{
			int index = 0;
			while (index<_PrimeSize)
			{
				if (_PrimeList[index] < _capacity)
					index++;
				else
				{
					HashTable<K, V> newHash(_PrimeList[index]);
					for (size_t i = 0; i < _capacity; i++)
					{
						if (head[i]._status==EXIST)
						newHash.Insert(head[i]._key, head[i]._value);
					}
					Swap(newHash);
					break;
				}
			}
		}
	}

	void Swap(HashTable<K, V>& newHash)
	{
		swap(head,newHash.head);
		swap(_size,newHash._size);
		swap(_capacity, newHash._capacity);
	}

private:
	Node* head;
	size_t _size;
	size_t _capacity;
};

void test3()   //测试整型
{
	int arr[] = {12,3,24,14,25,10,19,78,30,35};
	int size = sizeof(arr) / sizeof(arr[0]);
	HashTable<int, int> h1;
	for (int i = 0; i < size; i++)
	{
		h1.Insert(arr[i], arr[i] + 3);
	}
	h1.Display();
} 
void charTest()   //测试字符型
{
	HashTable<string, string> h2;
	h2.Insert("1111","1111");
	h2.Insert("1112", "1112");
	h2.Insert("1113", "1113");
	h2.Insert("1114", "1114");
	h2.Insert("1115", "1115");
	h2.Display();
}
